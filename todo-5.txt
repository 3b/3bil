port libs to new compiler
clean up old junk
remove old compiler
update tests
(testing lib? (run on host and target and compare results?))
document ffi gen?
clean up line endings
documentation?
more libs?

--
specials
conditions/restarts/etc
async conditions?
types
release stuff
  tree shaker
  obfuscation?
some way to switch between blob and expanded tags
\optimize bitmap writing
  (compile to blob tag and store that instead of recompiling every time)


---------------------------------------------------------
#'(on-enter-frame ship) ?

~accessors for ffi

make sure setf is using the macro instead of property hack?

package stuff
  make sure ffi classes inherit proper symbols (so stuff from superclasses
    works)
  export enough from avm2-* to compile things in a separate package
  (maybe look at doing package based compilation stuff too?)
  --
  conflicts:
    clone
    position
    to-string (some have a RADIX arg)

    bytes-total
    height
    width
    bytes-loaded
    length
    size
    text
    type
url
clear
transform
color
x
target
+none+
load
color-transform
+full-screen+
align
close
text-snapshot
smoothing
matrix
index
thickness
+right+
data
add-event-listener
name
play
contains
+default+

~switch accessor hack to compiler level stuff?
~  compile it directly instead of using a macro, so #' can be made to work?
  add #' support
     (expand to #'(lambda (x) (slot-value x 'foo)))
x  alternately, use inline functions, but that causes problems if we want
    to detect redefinition, since we will define the accessors multiple
    times (whenever a class uses that slot name) but still want to catch
    attempts to use that name for a normal function/macro (or to use it
    for an accessor when previously fbound)


--
~defmacro
 lambda lists (&arest,&optional)
?defclass
   flags (sealed, etc)
~  constructors
~    optionally with/without construct-super?
~  static/class properties
~ defmethod
   single specializer -> swf method with specialized arg as THIS?
 ffi class declaration?
   need some way to locally specify a class declaration without trying
     to add class definition to abc block (or easier way to link in an
     external set of declarations?)
   possibly some way to autogenerate imports from a loaded abc tag?
~accessors
 wrapper macros (like current c3/c3*/c4 that specify/define a symbol-table
   so the whole thing doesn't need a (let ((*symbol-table* ...)) ...)?
 better API to replace the c3/etc wrapper macros completely?
   .package based stuff?
   .slime integration?
   .load/compile-file etc. wrappers?
-----------------------------------
~~~closures

~~~nlx
 ----------
  need to return to correct exit-point from go/return-from
  bind a var to a unique value at entry to block/tagbody, then close over
  that in the return-from/go nlx, and use it to identify the correct
  activation
  ==
    (labels ((a (f c)
               (format t "enter ~s~%" c)
               (if (>= c 10)
                   (funcall f)
                   (if f
                       (a f (1+ c))
                       (a (lambda () (return-from a)) (1+ c))))
               (format t "exit ~s~%" c)))
      (a nil 0))

 ----------
~~~uwp

~~~tagbody

interning, defpackage?
  interning literal objects?
    ex: (eq #1=(cons 1 . 2) #1#)
    3.2.4.2.2 : http://www.lispworks.com/documentation/HyperSpec/Body/03_bdbb.htm

setf
  ~~~flet/labels
  global setf functions

global macros/global environment

lambda list keywords (&arest and &optional at least)

~~~jumps out of function call arglists

code cleanup

implement CL: stuff

inlining/compiler macros/etc
  inline cl stuff

real test framework, regression tests

arg count checking?

skip :coerce_foo when value is known to be correct type

store&use type info, allow type declarations
  (maybe some simple type propagation too?)

enforce same type on all exits from a block, or branches in an if
  (lazy way = specify coerce_a when no type specified externally,
   soem minimal type checking would be nicer though)

verifier in asm
  (possibly add fixer for some simple type errors too?)

top level closures?
    (let ((a 1))
      (defun a+1 () (incf a)))

get rid of unused bindings (exit-point in particular)

spill u-w-p return value to a local across cleanup if needed?
   (or maybe just always for now?)
 (unwind-protect 1 (catch 2 (throw 2 3))) -> 1?

---

http://www.lispworks.com/documentation/HyperSpec/Issues/iss152_w.htm
http://www.lispworks.com/documentation/HyperSpec/Body/03_af.htm
http://www.lispworks.com/documentation/HyperSpec/Body/05_b.htm

---
ffi constants %flash.ui:+left+, %flash.ui:+right+ conflicting between
    Keyboard:LEFT and KeyLocation:LEFT

setf slot-value
